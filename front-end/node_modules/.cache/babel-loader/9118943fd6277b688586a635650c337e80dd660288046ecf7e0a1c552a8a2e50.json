{"ast":null,"code":"const {\n  registerdb\n} = require(\"../models\");\nconst bcrypt = require(\"bcryptjs\");\nconst jwt = require(\"jsonwebtoken\");\nrequire('dotenv').config();\nconst checkEmail = async (req, res) => {\n  try {\n    const user = await registerdb.findOne({\n      where: {\n        Email: email\n      }\n    }); // Correct query object\n    if (user) {\n      return res.status(200).json({\n        msg: \"yes\"\n      });\n    } else {\n      return res.status(200).json({\n        msg: \"no\"\n      });\n    }\n  } catch (error) {\n    console.error(\"Error checking email:\", error);\n  }\n};\nconst updatepass = async (req, res) => {\n  try {\n    const {\n      Username,\n      uval\n    } = req.body;\n    const user = await registerdb.findOne({\n      where: {\n        Username\n      }\n    });\n    if (user) {\n      const hashedPassword = await bcrypt.hash(uval, 10);\n      await registerdb.update({\n        Password: hashedPassword\n      }, {\n        where: {\n          Username\n        }\n      });\n      return res.status(200).json({\n        msg: \"err1\"\n      });\n    } else {\n      return res.status(404).json({\n        msg: \"User not found\"\n      });\n    }\n  } catch (error) {\n    console.error(\"Error updating password:\", error);\n    res.status(500).send(\"Internal Server Error\");\n  }\n};\nconst login = async (req, res) => {\n  try {\n    const {\n      Username,\n      Password\n    } = req.body;\n    const user = await registerdb.findOne({\n      where: {\n        Username\n      }\n    });\n    if (user) {\n      const isMatch = await bcrypt.compare(Password, user.Password);\n      if (isMatch) {\n        const token = jwt.sign({\n          id: user.id,\n          Username: user.Username,\n          Email: user.Email\n        }, process.env.WALL_SEC, {\n          expiresIn: \"1h\"\n        });\n        res.cookie(\"token\", token, {\n          httpOnly: true,\n          secure: process.env.NODE_ENV === \"production\",\n          sameSite: \"Strict\"\n        });\n        return res.status(200).json({\n          msg: \"great\"\n        });\n      } else {\n        return res.status(401).json({\n          msg: \"badomen\"\n        });\n      }\n    } else {\n      return res.status(401).json({\n        msg: \"Invalid username\"\n      });\n    }\n  } catch (error) {\n    console.error(\"Error during login:\", error);\n    res.status(500).send(\"Internal Server Error\");\n  }\n};\nconst register = async (req, res) => {\n  console.log(\"Request Body:\", req.body);\n  try {\n    const {\n      Username,\n      Email,\n      Password,\n      Pfp\n    } = req.body;\n    const passwordRegex = /^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{6,}$/;\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    if (!passwordRegex.test(Password)) {\n      return res.status(400).json({\n        msg: \"false1\"\n      });\n    }\n    if (!emailRegex.test(Email)) {\n      return res.status(400).json({\n        msg: \"false2\"\n      });\n    }\n    const userExist = await registerdb.findOne({\n      where: {\n        Email\n      }\n    });\n    if (userExist) {\n      return res.status(400).json({\n        msg: \"false3\"\n      });\n    }\n    const hashedPassword = await bcrypt.hash(Password, 10);\n    const newPost = await registerdb.create({\n      Username,\n      Email,\n      Password: hashedPassword,\n      Pfp\n    });\n    res.status(201).json({\n      newPost\n    });\n  } catch (error) {\n    console.error(\"Error during registration:\", error);\n    res.status(500).send(\"Internal Server Error\");\n  }\n};\nconst authenticateToken = (req, res, next) => {\n  var _req$cookies;\n  const token = (_req$cookies = req.cookies) === null || _req$cookies === void 0 ? void 0 : _req$cookies.token;\n  if (!token) {\n    return res.status(401).json({\n      msg: \"Unauthorized, token not provided\"\n    });\n  }\n  jwt.verify(token, process.env.WALL_SEC, (err, user) => {\n    if (err) {\n      return res.status(403).json({\n        msg: \"Invalid or expired token\"\n      });\n    }\n    req.user = user;\n    next();\n  });\n};\nconst dashboard = (req, res) => {\n  res.status(200).json({\n    msg: \"Welcome to the dashboard\",\n    user: req.user\n  });\n};\nmodule.exports = {\n  login,\n  register,\n  dashboard,\n  authenticateToken,\n  checkEmail,\n  updatepass\n};","map":{"version":3,"names":["registerdb","require","bcrypt","jwt","config","checkEmail","req","res","user","findOne","where","Email","email","status","json","msg","error","console","updatepass","Username","uval","body","hashedPassword","hash","update","Password","send","login","isMatch","compare","token","sign","id","process","env","WALL_SEC","expiresIn","cookie","httpOnly","secure","NODE_ENV","sameSite","register","log","Pfp","passwordRegex","emailRegex","test","userExist","newPost","create","authenticateToken","next","_req$cookies","cookies","verify","err","dashboard","module","exports"],"sources":["C:/Users/ADITYA/Desktop/FS/front-end/src/Components/ForgotP/ForgotP.jsx"],"sourcesContent":["const { registerdb } = require(\"../models\");\r\nconst bcrypt = require(\"bcryptjs\");\r\nconst jwt = require(\"jsonwebtoken\");\r\nrequire('dotenv').config();\r\n\r\nconst checkEmail = async (req, res) => {\r\n  try {\r\n    const user = await registerdb.findOne({ where: { Email: email } }); // Correct query object\r\n    if(user){\r\n    return res.status(200).json({ msg: \"yes\" });\r\n    }else{\r\n      return res.status(200).json({ msg: \"no\" }); \r\n    }\r\n  } catch (error) {\r\n    console.error(\"Error checking email:\", error);\r\n  }\r\n};\r\nconst updatepass = async (req, res) => {\r\n  try {\r\n    const { Username, uval } = req.body;\r\n\r\n    const user = await registerdb.findOne({ where: { Username } });\r\n    \r\n    if (user) {\r\n      const hashedPassword = await bcrypt.hash(uval, 10);\r\n\r\n      await registerdb.update({ Password: hashedPassword }, { where: { Username } });\r\n\r\n      return res.status(200).json({ msg: \"err1\" });\r\n    } else {\r\n      return res.status(404).json({ msg: \"User not found\" });\r\n    }\r\n  } catch (error) {\r\n    console.error(\"Error updating password:\", error);\r\n    res.status(500).send(\"Internal Server Error\");\r\n  }\r\n};\r\n\r\nconst login = async (req, res) => {\r\n  try {\r\n    const { Username, Password } = req.body;\r\n    const user = await registerdb.findOne({ where: { Username } });\r\n    \r\n    if (user) {\r\n      const isMatch = await bcrypt.compare(Password, user.Password);\r\n      if (isMatch) {\r\n        const token = jwt.sign(\r\n          { id: user.id, Username: user.Username, Email: user.Email },\r\n          process.env.WALL_SEC,\r\n          { expiresIn: \"1h\" }\r\n        );\r\n\r\n        res.cookie(\"token\", token, {\r\n          httpOnly: true,\r\n          secure: process.env.NODE_ENV === \"production\",\r\n          sameSite: \"Strict\"\r\n        });\r\n\r\n        return res.status(200).json({ msg: \"great\" });\r\n      } else {\r\n        return res.status(401).json({ msg: \"badomen\" });\r\n      }\r\n    } else {\r\n      return res.status(401).json({ msg: \"Invalid username\" });\r\n    }\r\n  } catch (error) {\r\n    console.error(\"Error during login:\", error);\r\n    res.status(500).send(\"Internal Server Error\");\r\n  }\r\n};\r\n\r\nconst register = async (req, res) => {\r\n  console.log(\"Request Body:\", req.body); \r\n  try {\r\n    const { Username, Email, Password, Pfp } = req.body;\r\n    const passwordRegex = /^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{6,}$/;\r\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n\r\n    if (!passwordRegex.test(Password)) {\r\n      return res.status(400).json({ msg: \"false1\" });\r\n    }\r\n    if (!emailRegex.test(Email)) {\r\n      return res.status(400).json({ msg: \"false2\" });\r\n    }\r\n\r\n    const userExist = await registerdb.findOne({ where: { Email } });\r\n    if (userExist) {\r\n      return res.status(400).json({ msg: \"false3\" });\r\n    }\r\n\r\n    const hashedPassword = await bcrypt.hash(Password, 10);\r\n\r\n    const newPost = await registerdb.create({\r\n      Username,\r\n      Email,\r\n      Password: hashedPassword,\r\n      Pfp\r\n    });\r\n\r\n    res.status(201).json({ newPost });\r\n  } catch (error) {\r\n    console.error(\"Error during registration:\", error);\r\n    res.status(500).send(\"Internal Server Error\");\r\n  }\r\n};\r\n\r\nconst authenticateToken = (req, res, next) => {\r\n  const token = req.cookies?.token;\r\n  if (!token) {\r\n    return res.status(401).json({ msg: \"Unauthorized, token not provided\" });\r\n  }\r\n\r\n  jwt.verify(token, process.env.WALL_SEC, (err, user) => {\r\n    if (err) {\r\n      return res.status(403).json({ msg: \"Invalid or expired token\" });\r\n    }\r\n    req.user = user;\r\n    next();\r\n  });\r\n};\r\n\r\nconst dashboard = (req, res) => {\r\n  res.status(200).json({ msg: \"Welcome to the dashboard\", user: req.user });\r\n};\r\n\r\nmodule.exports = { login, register, dashboard, authenticateToken, checkEmail, updatepass};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}